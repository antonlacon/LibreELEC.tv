#!/bin/bash

# SPDX-License-Identifier: GPL-2.0-only
# Copyright (C) 2024 Ian Leonard (antonlacon@gmail.com)

set -e

THREADCOUNT="${THREADCOUNT:-$(nproc)}"

# helper functions
# die (message, code) abort with optional message and error code
die() {
  if [ -n "${1}" ]; then
    echo -e "${1}" >&2
  fi
  exit "${2:-1}"
}

# verify_checksum (file, checksum) verify checksum of file vs sha256sum, delete on mismatch
verify_checksum() {
  local file checksum file_checksum
  file="${1}"
  checksum="${2}"

  file_checksum=$(sha256sum "${file}" | cut -d" " -f1)
  if [ "${file_checksum}" != "${checksum}" ]; then
    echo "Error: Checksum failure: ${file}"
    echo "  Wanted: ${checksum}"
    echo "  Got: ${file_checksum}"
    echo "  Deleting..."
    rm "${file}"
  fi
}

# download_tarball (package, url, sha256) download package from url with sha256 checksum
download_tarball() {
  local pkg_name pkg_url pkg_filename pkg_sha256 checksum_result
  pkg_name=$(echo "${1}" | cut -d":" -f1)
  pkg_url="${2}"
  pkg_filename=$(basename "${pkg_url}")
  pkg_sha256="${3}"

  if [ ! -d "${OUTPUT_DIR}/${pkg_name}" ]; then
    mkdir -p "${OUTPUT_DIR}/${pkg_name}"
  fi
  if [ -f "${OUTPUT_DIR}/${pkg_name}/${pkg_filename}" ]; then
    verify_checksum "${OUTPUT_DIR}/${pkg_name}/${pkg_filename}" "${pkg_sha256}"
  fi
  if [ ! -f "${OUTPUT_DIR}/${pkg_name}/${pkg_filename}" ]; then
    if [ "${VERBOSE}" = "true" ]; then
      echo "Downloading: ${pkg_name}/${pkg_filename}"
    else
      local verbose_opts="--silent --show-error"
    fi
    curl --progress-bar ${verbose_opts} --connect-timeout 30 --retry 3 --continue-at - --location --max-redirs 5 --output-dir "${OUTPUT_DIR}/${pkg_name}/" --output "${pkg_filename}" "${pkg_url}"
    verify_checksum "${OUTPUT_DIR}/${pkg_name}/${pkg_filename}" "${pkg_sha256}"
  fi
}

help() {
  echo "Usage: ${0} [-i file] [-o directory]"
  echo "Set PROJECT, DEVICE and ARCH as required."
  echo "  -h this help"
  echo "  -i input file - list of files to download"
  echo "  -o output directory - location to download files"
  echo "  -v verbose progress output"
}

# command line opts
while getopts hi:o:v OPT; do
  case "${OPT}" in
    h)
      help
      exit 0
      ;;
    i)
      INPUT_FILE="${OPTARG}"
      ;;
    o)
      OUTPUT_DIR="${OPTARG}"
      ;;
    v)
      VERBOSE="true"
      ;;
    \?)
      # error and output help on unknown
      help
      die
      ;;
  esac
done
shift $((${OPTIND} - 1))

# sanity checking
if [ -n "${INPUT_FILE}" ] && [ ! -f "${INPUT_FILE}" ]; then
  die "Error: Unable to find input file: ${INPUT_FILE}"
fi
if [ -z "${OUTPUT_DIR}" ]; then
  die "Error: Output directory must be specified."
fi

# multithread with gnu parallel when available
if command -v parallel >/dev/null; then
  # import file or read from stdin
  while read -r line; do
    PKG_LIST+="${line}"$'\n'
  done <"${INPUT_FILE:-/dev/stdin}"
  # drop final line as an empty newline
  PKG_LIST=$(echo "${PKG_LIST}" | head --lines=-1)

  export -f download_tarball
  export -f verify_checksum
  export OUTPUT_DIR
  export VERBOSE
  parallel --no-notice --jobs "${THREADCOUNT}" --colsep ' ' download_tarball <<<"${PKG_LIST}"
else
  # import file or read from stdin
  while read -r line; do
    PKG_NAME=$(echo "${line}" | cut -d" " -f1 | cut -d":" -f1)
    PKG_URL=$(echo "${line}" | cut -d" " -f2)
    PKG_SHA256=$(echo "${line}" | cut -d" " -f3)
    download_tarball "${PKG_NAME}" "${PKG_URL}" "${PKG_SHA256}"
  done <"${INPUT_FILE:-/dev/stdin}"
fi
