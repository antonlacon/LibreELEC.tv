#!/bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (C) 2019-present Team LibreELEC (https://libreelec.tv)

set -e

# global vars
PACKAGES_CURRENT=""
PACKAGES_UNKNOWN=""
PACKAGES_BAD_REGEX=""
PACKAGES_BAD_REGEX_SKIP=""

die() {
  if [ -n "$1" ]; then
    echo -e "$1" >&2
  fi
  exit "${2:-1}"
}

compare_date() {
  # check if file is older than 1 week
  [ ! -f "${1}" ] && die "${1} is not a file"
  # Age of $1 in seconds is less than 1 week (in seconds) == true
  if [ $(( $(date +%s) - $(date -r "${1}" +%s) )) -lt $(( 7*24*60*60 )) ]; then
    return 0
  else
    return 1
  fi
}

strip_package_var() {
  # strip string to just value
  value="${1##*=}"
  value="${value#\"}"
  value="${value%\"}"
  echo "${value}"
}

check_for_update() {
  # wipe key variables between uses
  local PKG_NAME PKG_VERSION PKG_ID

  PKG_NAME=$( strip_package_var $(grep -m 1 "PKG_NAME=" "${1}") )
  PKG_VERSION=$( strip_package_var $(grep -m 1 "PKG_VERSION=" "${1}") )
#  PKG_ID=$( strip_package_var $(grep -m 1 "PKG_ID=" "${1}") )

  if [ -f pkg_version/BAD_REGEX.${PKG_NAME} ]; then
    if [ "${1}" -nt pkg_version/BAD_REGEX.${PKG_NAME} ]; then
      # check the date on the BAD_REGEX.* and that the package.mk is not newer
      rm pkg_version/BAD_REGEX.${PKG_NAME}
    else
      # delete BAD_REGEX.* file if older than 7 days
      compare_date pkg_version/BAD_REGEX.${PKG_NAME} || rm pkg_version/BAD_REGEX.${PKG_NAME}
    fi
  fi

  # go get the PKG_GERSION from repology.org
  if [ -z "${PKG_VERSION}" ]; then
    PACKAGES_CURRENT+=" ${PKG_NAME}"
    return
  elif [ -f pkg_version/BAD_REGEX.${PKG_NAME} ]; then
    PACKAGES_BAD_REGEX_SKIP+=" ${PKG_NAME}"
    return
  else
    pkg_version_file=0
    if [ -f pkg_version/${PKG_NAME} ]; then
      # delete pkg_version file if older than 7 days
      compare_date pkg_version/${PKG_NAME} || rm pkg_version/${PKG_NAME}
    fi

    if [ -f pkg_version/${PKG_NAME} ]; then
      upstream_version="$(cat pkg_version/${PKG_NAME})"
      pkg_version_file=1
    else
      #upstream_version="$(curl -s -L https://repology.org/project/${PKG_NAME,,}/information | grep -Po -m 1 '(?<=<span class="version version-big version-newest">)([^</span>]*)')"
      upstream_version="$(curl -s https://repology.org/badge/latest-versions/${PKG_NAME,,}.svg | grep -Po -m1 '(?<=text-anchor="middle">)[0-9.]+([^</text>]*)' | tail -1)"
    fi
  fi

  if [ -z "${upstream_version}" ]; then
    PACKAGES_BAD_REGEX+=" ${PKG_NAME}"
    touch pkg_version/BAD_REGEX.${PKG_NAME}
  elif [ "${PKG_VERSION}" != "${upstream_version}" ]; then
    printf "%-30s | %-40s | %-20s" "${PKG_NAME}" "${PKG_VERSION}" "${upstream_version}"; printf '\n'
    if [ "${pkg_version_file}" == "0" ]; then
      echo ${upstream_version} > pkg_version/${PKG_NAME}
    fi
  else
    PACKAGES_CURRENT+=" ${PKG_NAME}"
    if [ "${pkg_version_file}" == "0" ]; then
      echo ${upstream_version} > pkg_version/${PKG_NAME}
    fi
  fi
}


if [ ! -d "pkg_version" ]; then
  mkdir -p pkg_version 2>/dev/null || die "no pkg_version directory and unable to create one."
fi

PACKAGE_LIST=$(find packages/ -type f -name package.mk \
    ! -path "packages/mediacenter/*" \
    ! -path "packages/emulation/*" \
    ! -path "packages/addons/addon-depends/adafruit-libraries-depends/*" \
    ! -path "packages/lang/Python3/*" \
    | awk '{FS="/" ; $0=$0 ; print $(NF-1)"|"$0}' | sort | cut -d"|" -f2 \
    )

echo -e "\nUpdates found:\n"
printf "%-30s | %-40s | %-20s" "Package" "master" "upstream"; printf '\n'
echo "-------------------------------------------------------------------------------------------"

for build_file in ${PACKAGE_LIST}; do
  check_for_update "${build_file}"
done

echo ""

if [ -n "${PACKAGES_BAD_REGEX_SKIP}" ]; then
  echo -e "\nSkipped in this run (checked in the last 7 days.)"
  echo -e "Bad info in PKG_WATCH $(echo ${PACKAGES_BAD_REGEX_SKIP} | wc -w):\n${PACKAGES_BAD_REGEX_SKIP}\n"
fi
if [ -n "${PACKAGES_BAD_REGEX}" ]; then
  echo -e "\nBad info in PKG_WATCH $(echo ${PACKAGES_BAD_REGEX} | wc -w):\n${PACKAGES_BAD_REGEX}\n"
fi
if [ -n "${PACKAGES_CURRENT}" ]; then
  echo -e "\nCurrent $(echo ${PACKAGES_CURRENT} | wc -w):\n${PACKAGES_CURRENT}\n"
fi
if [ -n "${PACKAGES_UNKNOWN}" ]; then
  echo -e "\nUnknown $(echo ${PACKAGES_UNKNOWN} | wc -w):\n${PACKAGES_UNKNOWN}"
fi
